.. Copyright (C) 2001-2014 NLTK Project
.. For license information, see LICENSE.TXT

VerbNet
-------
The VerbNet corpus is a lexicon that divides verbs into classes, based
on their syntax-semantics linking behavior.  The basic elements in the
lexicon are verb lemmas, such as 'abandon' and 'accept', and verb
classes, which have identifiers such as 'remove-10.1' and
'admire-31.2-1'.  These class identifiers consist of a representitive
verb selected from the class, followed by a numerical identifier.  The
list of verb lemmas, and the list of class identifiers, can be
retrieved with the following methods:

    >>> from nltk.corpus import verbnet
    >>> verbnet.lemmas()[20:25]
    ['abut', 'accede', 'accelerate', 'accept', 'acclaim']
    >>> verbnet.classids()[:5]
    ['accept-77', 'accompany-51.7', 'acquiesce-95', 'addict-96',
     'adjust-26.9']

The `classids()` method may also be used to retrieve the classes that
a given lemma belongs to:

    >>> verbnet.classids('accept')
    ['accept-77', 'approve-77', 'characterize-29.2-1-1',
     'obtain-13.5.2']

The primary object in the lexicon is a class record, which is stored
as an ElementTree xml object.  The class record for a given class
identifier is returned by the `vnclass()` method:

    >>> verbnet.vnclass('remove-10.1')
    <Element 'VNCLASS' at ...>

The `vnclass()` method also accepts "short" identifiers, such as '10.1':

    >>> verbnet.vnclass('10.1')
    <Element 'VNCLASS' at ...>

See the VerbNet documentation, or the VerbNet files, for information
about the structure of this xml.  As an example, we can retrieve a
list of thematic roles for a given VerbNet class:

    >>> vn_31_2 = verbnet.vnclass('admire-31.2')
    >>> for themrole in vn_31_2.findall('THEMROLES/THEMROLE'):
    ...     print(themrole.attrib['type'], end=' ')
    ...     for selrestr in themrole.findall('SELRESTRS/SELRESTR'):
    ...         print('[%(Value)s%(type)s]' % selrestr.attrib, end=' ')
    ...     print()
    Theme
    Experiencer [+animate]
    Predicate

The VerbNet corpus also provides a variety of pretty printing
functions that can be used to display the xml contents in a more
consise form.  The simplest such method is `pprint()`:

    >>> print(verbnet.pprint('57'))
    weather-57
      Subclasses: (none)
      Members: blow clear drizzle fog freeze gust hail howl lightning mist
        mizzle pelt pour precipitate rain roar shower sleet snow spit spot
        sprinkle storm swelter teem thaw thunder
      Thematic roles:
        * Theme[+concrete +force]
      Frames:
        Intransitive (Expletive Subject)
          Syntax: LEX[it] LEX[[+be]] VERB
          Semantics:
            * weather(during(E), Weather_type, ?Theme)
        NP (Expletive Subject, Theme Object)
          Syntax: LEX[it] LEX[[+be]] VERB NP[Theme]
          Semantics:
            * weather(during(E), Weather_type, Theme)
        PP (Expletive Subject, Theme-PP)
          Syntax: LEX[it[+be]] VERB PREP[with] NP[Theme]
          Semantics:
            * weather(during(E), Weather_type, Theme)

VerbNet Corpus Reader
=====================

Make sure we're picking up the right number of elements:

    >>> from nltk.corpus import verbnet
    >>> len(verbnet.lemmas())
    3907
    >>> len(verbnet.wordnetids())
    5317
    >>> len(verbnet.classids())
    484

Selecting classids based on various selectors:

    >>> verbnet.classids(lemma='take')
    ['bring-11.3', 'characterize-29.2', 'convert-26.6.2', 'cost-54.2',
     'fit-54.3', 'hire-13.5.3', 'performance-26.7-2', 'require-103',
     'steal-10.5']
    >>> verbnet.classids(wordnetid='lead%2:38:01')
    ['accompany-51.7']
    >>> verbnet.classids(fileid='approve-77.xml')
    ['approve-77']
    >>> verbnet.classids(classid='admire-31.2') # subclasses
    ['admire-31.2-1']

vnclass() accepts filenames, long ids, and short ids:

    >>> from xml.etree import ElementTree
    >>> a = ElementTree.tostring(verbnet.vnclass('admire-31.2.xml'))
    >>> b = ElementTree.tostring(verbnet.vnclass('admire-31.2'))
    >>> c = ElementTree.tostring(verbnet.vnclass('31.2'))
    >>> a == b == c
    True

fileids() can be used to get files based on VerbNet class ids:

    >>> verbnet.fileids('admire-31.2')
    ['admire-31.2.xml']
    >>> verbnet.fileids(['admire-31.2', 'obtain-13.5.2'])
    ['admire-31.2.xml', 'obtain-13.5.2.xml']
    >>> verbnet.fileids('badidentifier')
    Traceback (most recent call last):
      . . .
    ValueError: vnclass identifier 'badidentifier' not found

longid() and shortid() can be used to convert identifiers:

    >>> verbnet.longid('31.2')
    'admire-31.2'
    >>> verbnet.longid('admire-31.2')
    'admire-31.2'
    >>> verbnet.shortid('31.2')
    '31.2'
    >>> verbnet.shortid('admire-31.2')
    '31.2'
    >>> verbnet.longid('badidentifier')
    Traceback (most recent call last):
      . . .
    ValueError: vnclass identifier 'badidentifier' not found
    >>> verbnet.shortid('badidentifier')
    Traceback (most recent call last):
      . . .
    ValueError: vnclass identifier 'badidentifier' not found

